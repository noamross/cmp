// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __cmp_RcppExports_h__
#define __cmp_RcppExports_h__

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace cmp {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("cmp", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("cmp", "cmp_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in cmp");
            }
        }
    }

    inline double compute_z(double lambda, double nu, double log_error_z = 1e-6, int maxit_z = 10000) {
        typedef SEXP(*Ptr_compute_z)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_z p_compute_z = NULL;
        if (p_compute_z == NULL) {
            validateSignature("double(*compute_z)(double,double,double,int)");
            p_compute_z = (Ptr_compute_z)R_GetCCallable("cmp", "cmp_compute_z");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_compute_z(Rcpp::wrap(lambda), Rcpp::wrap(nu), Rcpp::wrap(log_error_z), Rcpp::wrap(maxit_z));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double compute_log_z(double lambda, double nu, double log_error_z = 1e-6, int maxit_z = 10000) {
        typedef SEXP(*Ptr_compute_log_z)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_log_z p_compute_log_z = NULL;
        if (p_compute_log_z == NULL) {
            validateSignature("double(*compute_log_z)(double,double,double,int)");
            p_compute_log_z = (Ptr_compute_log_z)R_GetCCallable("cmp", "cmp_compute_log_z");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_compute_log_z(Rcpp::wrap(lambda), Rcpp::wrap(nu), Rcpp::wrap(log_error_z), Rcpp::wrap(maxit_z));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double compute_log_z_approx(double lambda, double nu) {
        typedef SEXP(*Ptr_compute_log_z_approx)(SEXP,SEXP);
        static Ptr_compute_log_z_approx p_compute_log_z_approx = NULL;
        if (p_compute_log_z_approx == NULL) {
            validateSignature("double(*compute_log_z_approx)(double,double)");
            p_compute_log_z_approx = (Ptr_compute_log_z_approx)R_GetCCallable("cmp", "cmp_compute_log_z_approx");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_compute_log_z_approx(Rcpp::wrap(lambda), Rcpp::wrap(nu));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double logsumexp(NumericVector x) {
        typedef SEXP(*Ptr_logsumexp)(SEXP);
        static Ptr_logsumexp p_logsumexp = NULL;
        if (p_logsumexp == NULL) {
            validateSignature("double(*logsumexp)(NumericVector)");
            p_logsumexp = (Ptr_logsumexp)R_GetCCallable("cmp", "cmp_logsumexp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_logsumexp(Rcpp::wrap(x));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double logdiffexp(double x, double y) {
        typedef SEXP(*Ptr_logdiffexp)(SEXP,SEXP);
        static Ptr_logdiffexp p_logdiffexp = NULL;
        if (p_logdiffexp == NULL) {
            validateSignature("double(*logdiffexp)(double,double)");
            p_logdiffexp = (Ptr_logdiffexp)R_GetCCallable("cmp", "cmp_logdiffexp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_logdiffexp(Rcpp::wrap(x), Rcpp::wrap(y));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double compute_log_z_old(double lambda, double nu, double log_error_z = 0.0001, int maxit_z = 10000) {
        typedef SEXP(*Ptr_compute_log_z_old)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_log_z_old p_compute_log_z_old = NULL;
        if (p_compute_log_z_old == NULL) {
            validateSignature("double(*compute_log_z_old)(double,double,double,int)");
            p_compute_log_z_old = (Ptr_compute_log_z_old)R_GetCCallable("cmp", "cmp_compute_log_z_old");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_compute_log_z_old(Rcpp::wrap(lambda), Rcpp::wrap(nu), Rcpp::wrap(log_error_z), Rcpp::wrap(maxit_z));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline NumericVector dcmp(NumericVector x, double lambda, double nu, double z = NA_REAL, bool log_p = false, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false) {
        typedef SEXP(*Ptr_dcmp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_dcmp p_dcmp = NULL;
        if (p_dcmp == NULL) {
            validateSignature("NumericVector(*dcmp)(NumericVector,double,double,double,bool,double,int,bool)");
            p_dcmp = (Ptr_dcmp)R_GetCCallable("cmp", "cmp_dcmp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_dcmp(Rcpp::wrap(x), Rcpp::wrap(lambda), Rcpp::wrap(nu), Rcpp::wrap(z), Rcpp::wrap(log_p), Rcpp::wrap(log_error_z), Rcpp::wrap(maxit_z), Rcpp::wrap(parallel));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

    inline NumericVector pcmp(NumericVector q, double lambda, double nu, double z = NA_REAL, bool log_p = false, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false) {
        typedef SEXP(*Ptr_pcmp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_pcmp p_pcmp = NULL;
        if (p_pcmp == NULL) {
            validateSignature("NumericVector(*pcmp)(NumericVector,double,double,double,bool,double,int,bool)");
            p_pcmp = (Ptr_pcmp)R_GetCCallable("cmp", "cmp_pcmp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_pcmp(Rcpp::wrap(q), Rcpp::wrap(lambda), Rcpp::wrap(nu), Rcpp::wrap(z), Rcpp::wrap(log_p), Rcpp::wrap(log_error_z), Rcpp::wrap(maxit_z), Rcpp::wrap(parallel));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

    inline NumericVector qcmp(NumericVector p, double lambda, double nu, double z = NA_REAL, bool log_p = false, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false) {
        typedef SEXP(*Ptr_qcmp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_qcmp p_qcmp = NULL;
        if (p_qcmp == NULL) {
            validateSignature("NumericVector(*qcmp)(NumericVector,double,double,double,bool,double,int,bool)");
            p_qcmp = (Ptr_qcmp)R_GetCCallable("cmp", "cmp_qcmp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_qcmp(Rcpp::wrap(p), Rcpp::wrap(lambda), Rcpp::wrap(nu), Rcpp::wrap(z), Rcpp::wrap(log_p), Rcpp::wrap(log_error_z), Rcpp::wrap(maxit_z), Rcpp::wrap(parallel));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

    inline NumericVector rcmp(int n, double lambda, double nu, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false) {
        typedef SEXP(*Ptr_rcmp)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_rcmp p_rcmp = NULL;
        if (p_rcmp == NULL) {
            validateSignature("NumericVector(*rcmp)(int,double,double,double,double,int,bool)");
            p_rcmp = (Ptr_rcmp)R_GetCCallable("cmp", "cmp_rcmp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_rcmp(Rcpp::wrap(n), Rcpp::wrap(lambda), Rcpp::wrap(nu), Rcpp::wrap(z), Rcpp::wrap(log_error_z), Rcpp::wrap(maxit_z), Rcpp::wrap(parallel));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

    inline double cmp_loglik(NumericMatrix x, double lambda, double nu, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false) {
        typedef SEXP(*Ptr_cmp_loglik)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cmp_loglik p_cmp_loglik = NULL;
        if (p_cmp_loglik == NULL) {
            validateSignature("double(*cmp_loglik)(NumericMatrix,double,double,double,double,int,bool)");
            p_cmp_loglik = (Ptr_cmp_loglik)R_GetCCallable("cmp", "cmp_cmp_loglik");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cmp_loglik(Rcpp::wrap(x), Rcpp::wrap(lambda), Rcpp::wrap(nu), Rcpp::wrap(z), Rcpp::wrap(log_error_z), Rcpp::wrap(maxit_z), Rcpp::wrap(parallel));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline IntegerVector cmp_loglik2(NumericVector x, double lambda, double nu, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false) {
        typedef SEXP(*Ptr_cmp_loglik2)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cmp_loglik2 p_cmp_loglik2 = NULL;
        if (p_cmp_loglik2 == NULL) {
            validateSignature("IntegerVector(*cmp_loglik2)(NumericVector,double,double,double,double,int,bool)");
            p_cmp_loglik2 = (Ptr_cmp_loglik2)R_GetCCallable("cmp", "cmp_cmp_loglik2");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cmp_loglik2(Rcpp::wrap(x), Rcpp::wrap(lambda), Rcpp::wrap(nu), Rcpp::wrap(z), Rcpp::wrap(log_error_z), Rcpp::wrap(maxit_z), Rcpp::wrap(parallel));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<IntegerVector >(__result);
    }

    inline double pois_loglik(NumericMatrix x, double lambda) {
        typedef SEXP(*Ptr_pois_loglik)(SEXP,SEXP);
        static Ptr_pois_loglik p_pois_loglik = NULL;
        if (p_pois_loglik == NULL) {
            validateSignature("double(*pois_loglik)(NumericMatrix,double)");
            p_pois_loglik = (Ptr_pois_loglik)R_GetCCallable("cmp", "cmp_pois_loglik");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_pois_loglik(Rcpp::wrap(x), Rcpp::wrap(lambda));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double nb_loglik(NumericMatrix x, double mu, double size) {
        typedef SEXP(*Ptr_nb_loglik)(SEXP,SEXP,SEXP);
        static Ptr_nb_loglik p_nb_loglik = NULL;
        if (p_nb_loglik == NULL) {
            validateSignature("double(*nb_loglik)(NumericMatrix,double,double)");
            p_nb_loglik = (Ptr_nb_loglik)R_GetCCallable("cmp", "cmp_nb_loglik");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_nb_loglik(Rcpp::wrap(x), Rcpp::wrap(mu), Rcpp::wrap(size));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double cmp_log_mean(double lambda, double nu, double log_error = 1e-6, int maxit = 1e6, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false) {
        typedef SEXP(*Ptr_cmp_log_mean)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cmp_log_mean p_cmp_log_mean = NULL;
        if (p_cmp_log_mean == NULL) {
            validateSignature("double(*cmp_log_mean)(double,double,double,int,double,double,int,bool)");
            p_cmp_log_mean = (Ptr_cmp_log_mean)R_GetCCallable("cmp", "cmp_cmp_log_mean");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cmp_log_mean(Rcpp::wrap(lambda), Rcpp::wrap(nu), Rcpp::wrap(log_error), Rcpp::wrap(maxit), Rcpp::wrap(z), Rcpp::wrap(log_error_z), Rcpp::wrap(maxit_z), Rcpp::wrap(parallel));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double cmp_log_mean_approx(double lambda, double nu) {
        typedef SEXP(*Ptr_cmp_log_mean_approx)(SEXP,SEXP);
        static Ptr_cmp_log_mean_approx p_cmp_log_mean_approx = NULL;
        if (p_cmp_log_mean_approx == NULL) {
            validateSignature("double(*cmp_log_mean_approx)(double,double)");
            p_cmp_log_mean_approx = (Ptr_cmp_log_mean_approx)R_GetCCallable("cmp", "cmp_cmp_log_mean_approx");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cmp_log_mean_approx(Rcpp::wrap(lambda), Rcpp::wrap(nu));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double cmp_mean(double lambda, double nu, double log_error = 1e-6, int maxit = 1e6, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false) {
        typedef SEXP(*Ptr_cmp_mean)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cmp_mean p_cmp_mean = NULL;
        if (p_cmp_mean == NULL) {
            validateSignature("double(*cmp_mean)(double,double,double,int,double,double,int,bool)");
            p_cmp_mean = (Ptr_cmp_mean)R_GetCCallable("cmp", "cmp_cmp_mean");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cmp_mean(Rcpp::wrap(lambda), Rcpp::wrap(nu), Rcpp::wrap(log_error), Rcpp::wrap(maxit), Rcpp::wrap(z), Rcpp::wrap(log_error_z), Rcpp::wrap(maxit_z), Rcpp::wrap(parallel));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double cmp_log_var(double lambda, double nu, double log_error = 1e-6, int maxit = 1e6, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false) {
        typedef SEXP(*Ptr_cmp_log_var)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cmp_log_var p_cmp_log_var = NULL;
        if (p_cmp_log_var == NULL) {
            validateSignature("double(*cmp_log_var)(double,double,double,int,double,double,int,bool)");
            p_cmp_log_var = (Ptr_cmp_log_var)R_GetCCallable("cmp", "cmp_cmp_log_var");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cmp_log_var(Rcpp::wrap(lambda), Rcpp::wrap(nu), Rcpp::wrap(log_error), Rcpp::wrap(maxit), Rcpp::wrap(z), Rcpp::wrap(log_error_z), Rcpp::wrap(maxit_z), Rcpp::wrap(parallel));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double cmp_var(double lambda, double nu, double log_error = 1e-6, int maxit = 1e6, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false) {
        typedef SEXP(*Ptr_cmp_var)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_cmp_var p_cmp_var = NULL;
        if (p_cmp_var == NULL) {
            validateSignature("double(*cmp_var)(double,double,double,int,double,double,int,bool)");
            p_cmp_var = (Ptr_cmp_var)R_GetCCallable("cmp", "cmp_cmp_var");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cmp_var(Rcpp::wrap(lambda), Rcpp::wrap(nu), Rcpp::wrap(log_error), Rcpp::wrap(maxit), Rcpp::wrap(z), Rcpp::wrap(log_error_z), Rcpp::wrap(maxit_z), Rcpp::wrap(parallel));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double cmp_log_var_approx(double lambda, double nu) {
        typedef SEXP(*Ptr_cmp_log_var_approx)(SEXP,SEXP);
        static Ptr_cmp_log_var_approx p_cmp_log_var_approx = NULL;
        if (p_cmp_log_var_approx == NULL) {
            validateSignature("double(*cmp_log_var_approx)(double,double)");
            p_cmp_log_var_approx = (Ptr_cmp_log_var_approx)R_GetCCallable("cmp", "cmp_cmp_log_var_approx");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cmp_log_var_approx(Rcpp::wrap(lambda), Rcpp::wrap(nu));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double cmp_var_approx(double lambda, double nu) {
        typedef SEXP(*Ptr_cmp_var_approx)(SEXP,SEXP);
        static Ptr_cmp_var_approx p_cmp_var_approx = NULL;
        if (p_cmp_var_approx == NULL) {
            validateSignature("double(*cmp_var_approx)(double,double)");
            p_cmp_var_approx = (Ptr_cmp_var_approx)R_GetCCallable("cmp", "cmp_cmp_var_approx");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cmp_var_approx(Rcpp::wrap(lambda), Rcpp::wrap(nu));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

}

#endif // __cmp_RcppExports_h__
