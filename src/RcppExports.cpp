// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/compoisson2.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// compute_z
double compute_z(double lambda, double nu, double log_error = 0.001, int maxit = 100);
RcppExport SEXP compoisson2_compute_z(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        double __result = compute_z(lambda, nu, log_error, maxit);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// compute_log_z
double compute_log_z(double lambda, double nu, double log_error = 0.001, int maxit = 100);
RcppExport SEXP compoisson2_compute_log_z(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        double __result = compute_log_z(lambda, nu, log_error, maxit);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// logsumexp
double logsumexp(NumericVector x);
RcppExport SEXP compoisson2_logsumexp(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        double __result = logsumexp(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// d_com
double d_com(double x, double lambda, double nu, bool log = false, double z = NA_REAL, double log_error = 0.001, int maxit = 100);
static SEXP compoisson2_d_com_try(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP logSEXP, SEXP zSEXP, SEXP log_errorSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< bool >::type log(logSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        double __result = d_com(x, lambda, nu, log, z, log_error, maxit);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson2_d_com(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP logSEXP, SEXP zSEXP, SEXP log_errorSEXP, SEXP maxitSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson2_d_com_try(xSEXP, lambdaSEXP, nuSEXP, logSEXP, zSEXP, log_errorSEXP, maxitSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// p_com
double p_com(double q, double lambda, double nu, bool log = false, double z = NA_REAL, double log_error = 0.001, int maxit = 100);
static SEXP compoisson2_p_com_try(SEXP qSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP logSEXP, SEXP zSEXP, SEXP log_errorSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type q(qSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< bool >::type log(logSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        double __result = p_com(q, lambda, nu, log, z, log_error, maxit);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson2_p_com(SEXP qSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP logSEXP, SEXP zSEXP, SEXP log_errorSEXP, SEXP maxitSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson2_p_com_try(qSEXP, lambdaSEXP, nuSEXP, logSEXP, zSEXP, log_errorSEXP, maxitSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// q_com
int q_com(double p, double lambda, double nu, bool log = false, double z = NA_REAL, double log_error = 0.001, int maxit = 100);
static SEXP compoisson2_q_com_try(SEXP pSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP logSEXP, SEXP zSEXP, SEXP log_errorSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type p(pSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< bool >::type log(logSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        int __result = q_com(p, lambda, nu, log, z, log_error, maxit);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson2_q_com(SEXP pSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP logSEXP, SEXP zSEXP, SEXP log_errorSEXP, SEXP maxitSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson2_q_com_try(pSEXP, lambdaSEXP, nuSEXP, logSEXP, zSEXP, log_errorSEXP, maxitSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// r_com
NumericVector r_com(int n, double lambda, double nu, bool log = false, double z = NA_REAL, double log_error = 0.001, int maxit = 100);
static SEXP compoisson2_r_com_try(SEXP nSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP logSEXP, SEXP zSEXP, SEXP log_errorSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< bool >::type log(logSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        NumericVector __result = r_com(n, lambda, nu, log, z, log_error, maxit);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson2_r_com(SEXP nSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP logSEXP, SEXP zSEXP, SEXP log_errorSEXP, SEXP maxitSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson2_r_com_try(nSEXP, lambdaSEXP, nuSEXP, logSEXP, zSEXP, log_errorSEXP, maxitSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int compoisson2_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*d_com)(double,double,double,bool,double,double,int)");
        signatures.insert("double(*p_com)(double,double,double,bool,double,double,int)");
        signatures.insert("int(*q_com)(double,double,double,bool,double,double,int)");
        signatures.insert("NumericVector(*r_com)(int,double,double,bool,double,double,int)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP compoisson2_RcppExport_registerCCallable() { 
    R_RegisterCCallable("compoisson2", "compoisson2_d_com", (DL_FUNC)compoisson2_d_com_try);
    R_RegisterCCallable("compoisson2", "compoisson2_p_com", (DL_FUNC)compoisson2_p_com_try);
    R_RegisterCCallable("compoisson2", "compoisson2_q_com", (DL_FUNC)compoisson2_q_com_try);
    R_RegisterCCallable("compoisson2", "compoisson2_r_com", (DL_FUNC)compoisson2_r_com_try);
    R_RegisterCCallable("compoisson2", "compoisson2_RcppExport_validate", (DL_FUNC)compoisson2_RcppExport_validate);
    return R_NilValue;
}
