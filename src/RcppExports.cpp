// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/cmp.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// compute_z
double compute_z(double lambda, double nu, double log_error_z = 1e-6, int maxit_z = 10000);
static SEXP cmp_compute_z_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        double __result = compute_z(lambda, nu, log_error_z, maxit_z);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_compute_z(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_compute_z_try(lambdaSEXP, nuSEXP, log_error_zSEXP, maxit_zSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// compute_log_z
double compute_log_z(double lambda, double nu, double log_error_z = 1e-6, int maxit_z = 10000);
static SEXP cmp_compute_log_z_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        double __result = compute_log_z(lambda, nu, log_error_z, maxit_z);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_compute_log_z(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_compute_log_z_try(lambdaSEXP, nuSEXP, log_error_zSEXP, maxit_zSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// compute_log_z_approx
double compute_log_z_approx(double lambda, double nu);
static SEXP cmp_compute_log_z_approx_try(SEXP lambdaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        double __result = compute_log_z_approx(lambda, nu);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_compute_log_z_approx(SEXP lambdaSEXP, SEXP nuSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_compute_log_z_approx_try(lambdaSEXP, nuSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// logsumexp
double logsumexp(NumericVector x);
static SEXP cmp_logsumexp_try(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        double __result = logsumexp(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_logsumexp(SEXP xSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_logsumexp_try(xSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// logdiffexp
double logdiffexp(double x, double y);
static SEXP cmp_logdiffexp_try(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type y(ySEXP );
        double __result = logdiffexp(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_logdiffexp(SEXP xSEXP, SEXP ySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_logdiffexp_try(xSEXP, ySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// compute_log_z_old
double compute_log_z_old(double lambda, double nu, double log_error_z = 0.0001, int maxit_z = 10000);
static SEXP cmp_compute_log_z_old_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        double __result = compute_log_z_old(lambda, nu, log_error_z, maxit_z);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_compute_log_z_old(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_compute_log_z_old_try(lambdaSEXP, nuSEXP, log_error_zSEXP, maxit_zSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// dcmp
NumericVector dcmp(NumericVector x, double lambda, double nu, double z = NA_REAL, bool log_p = false, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP cmp_dcmp_try(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_pSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        NumericVector __result = dcmp(x, lambda, nu, z, log_p, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_dcmp(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_pSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_dcmp_try(xSEXP, lambdaSEXP, nuSEXP, zSEXP, log_pSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// pcmp
NumericVector pcmp(NumericVector q, double lambda, double nu, double z = NA_REAL, bool log_p = false, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP cmp_pcmp_try(SEXP qSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_pSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        NumericVector __result = pcmp(q, lambda, nu, z, log_p, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_pcmp(SEXP qSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_pSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_pcmp_try(qSEXP, lambdaSEXP, nuSEXP, zSEXP, log_pSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// qcmp
NumericVector qcmp(NumericVector p, double lambda, double nu, double z = NA_REAL, bool log_p = false, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP cmp_qcmp_try(SEXP pSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_pSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        NumericVector __result = qcmp(p, lambda, nu, z, log_p, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_qcmp(SEXP pSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_pSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_qcmp_try(pSEXP, lambdaSEXP, nuSEXP, zSEXP, log_pSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// rcmp
NumericVector rcmp(int n, double lambda, double nu, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP cmp_rcmp_try(SEXP nSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        NumericVector __result = rcmp(n, lambda, nu, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_rcmp(SEXP nSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_rcmp_try(nSEXP, lambdaSEXP, nuSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// cmp_loglik
double cmp_loglik(NumericMatrix x, double lambda, double nu, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP cmp_cmp_loglik_try(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        double __result = cmp_loglik(x, lambda, nu, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_cmp_loglik(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_cmp_loglik_try(xSEXP, lambdaSEXP, nuSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// cmp_loglik2
IntegerVector cmp_loglik2(NumericVector x, double lambda, double nu, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP cmp_cmp_loglik2_try(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        IntegerVector __result = cmp_loglik2(x, lambda, nu, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_cmp_loglik2(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_cmp_loglik2_try(xSEXP, lambdaSEXP, nuSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// pois_loglik
double pois_loglik(NumericMatrix x, double lambda);
static SEXP cmp_pois_loglik_try(SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        double __result = pois_loglik(x, lambda);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_pois_loglik(SEXP xSEXP, SEXP lambdaSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_pois_loglik_try(xSEXP, lambdaSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// nb_loglik
double nb_loglik(NumericMatrix x, double mu, double size);
static SEXP cmp_nb_loglik_try(SEXP xSEXP, SEXP muSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type mu(muSEXP );
        Rcpp::traits::input_parameter< double >::type size(sizeSEXP );
        double __result = nb_loglik(x, mu, size);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_nb_loglik(SEXP xSEXP, SEXP muSEXP, SEXP sizeSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_nb_loglik_try(xSEXP, muSEXP, sizeSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// cmp_log_mean
double cmp_log_mean(double lambda, double nu, double log_error = 1e-6, int maxit = 1e6, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP cmp_cmp_log_mean_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        double __result = cmp_log_mean(lambda, nu, log_error, maxit, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_cmp_log_mean(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_cmp_log_mean_try(lambdaSEXP, nuSEXP, log_errorSEXP, maxitSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// cmp_log_mean_approx
double cmp_log_mean_approx(double lambda, double nu);
static SEXP cmp_cmp_log_mean_approx_try(SEXP lambdaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        double __result = cmp_log_mean_approx(lambda, nu);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_cmp_log_mean_approx(SEXP lambdaSEXP, SEXP nuSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_cmp_log_mean_approx_try(lambdaSEXP, nuSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// cmp_mean
double cmp_mean(double lambda, double nu, double log_error = 1e-6, int maxit = 1e6, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP cmp_cmp_mean_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        double __result = cmp_mean(lambda, nu, log_error, maxit, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_cmp_mean(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_cmp_mean_try(lambdaSEXP, nuSEXP, log_errorSEXP, maxitSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// cmp_log_var
double cmp_log_var(double lambda, double nu, double log_error = 1e-6, int maxit = 1e6, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP cmp_cmp_log_var_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        double __result = cmp_log_var(lambda, nu, log_error, maxit, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_cmp_log_var(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_cmp_log_var_try(lambdaSEXP, nuSEXP, log_errorSEXP, maxitSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// cmp_var
double cmp_var(double lambda, double nu, double log_error = 1e-6, int maxit = 1e6, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP cmp_cmp_var_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        double __result = cmp_var(lambda, nu, log_error, maxit, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_cmp_var(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_cmp_var_try(lambdaSEXP, nuSEXP, log_errorSEXP, maxitSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// cmp_log_var_approx
double cmp_log_var_approx(double lambda, double nu);
static SEXP cmp_cmp_log_var_approx_try(SEXP lambdaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        double __result = cmp_log_var_approx(lambda, nu);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_cmp_log_var_approx(SEXP lambdaSEXP, SEXP nuSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_cmp_log_var_approx_try(lambdaSEXP, nuSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// cmp_var_approx
double cmp_var_approx(double lambda, double nu);
static SEXP cmp_cmp_var_approx_try(SEXP lambdaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        double __result = cmp_var_approx(lambda, nu);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP cmp_cmp_var_approx(SEXP lambdaSEXP, SEXP nuSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(cmp_cmp_var_approx_try(lambdaSEXP, nuSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int cmp_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*compute_z)(double,double,double,int)");
        signatures.insert("double(*compute_log_z)(double,double,double,int)");
        signatures.insert("double(*compute_log_z_approx)(double,double)");
        signatures.insert("double(*logsumexp)(NumericVector)");
        signatures.insert("double(*logdiffexp)(double,double)");
        signatures.insert("double(*compute_log_z_old)(double,double,double,int)");
        signatures.insert("NumericVector(*dcmp)(NumericVector,double,double,double,bool,double,int,bool)");
        signatures.insert("NumericVector(*pcmp)(NumericVector,double,double,double,bool,double,int,bool)");
        signatures.insert("NumericVector(*qcmp)(NumericVector,double,double,double,bool,double,int,bool)");
        signatures.insert("NumericVector(*rcmp)(int,double,double,double,double,int,bool)");
        signatures.insert("double(*cmp_loglik)(NumericMatrix,double,double,double,double,int,bool)");
        signatures.insert("IntegerVector(*cmp_loglik2)(NumericVector,double,double,double,double,int,bool)");
        signatures.insert("double(*pois_loglik)(NumericMatrix,double)");
        signatures.insert("double(*nb_loglik)(NumericMatrix,double,double)");
        signatures.insert("double(*cmp_log_mean)(double,double,double,int,double,double,int,bool)");
        signatures.insert("double(*cmp_log_mean_approx)(double,double)");
        signatures.insert("double(*cmp_mean)(double,double,double,int,double,double,int,bool)");
        signatures.insert("double(*cmp_log_var)(double,double,double,int,double,double,int,bool)");
        signatures.insert("double(*cmp_var)(double,double,double,int,double,double,int,bool)");
        signatures.insert("double(*cmp_log_var_approx)(double,double)");
        signatures.insert("double(*cmp_var_approx)(double,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP cmp_RcppExport_registerCCallable() { 
    R_RegisterCCallable("cmp", "cmp_compute_z", (DL_FUNC)cmp_compute_z_try);
    R_RegisterCCallable("cmp", "cmp_compute_log_z", (DL_FUNC)cmp_compute_log_z_try);
    R_RegisterCCallable("cmp", "cmp_compute_log_z_approx", (DL_FUNC)cmp_compute_log_z_approx_try);
    R_RegisterCCallable("cmp", "cmp_logsumexp", (DL_FUNC)cmp_logsumexp_try);
    R_RegisterCCallable("cmp", "cmp_logdiffexp", (DL_FUNC)cmp_logdiffexp_try);
    R_RegisterCCallable("cmp", "cmp_compute_log_z_old", (DL_FUNC)cmp_compute_log_z_old_try);
    R_RegisterCCallable("cmp", "cmp_dcmp", (DL_FUNC)cmp_dcmp_try);
    R_RegisterCCallable("cmp", "cmp_pcmp", (DL_FUNC)cmp_pcmp_try);
    R_RegisterCCallable("cmp", "cmp_qcmp", (DL_FUNC)cmp_qcmp_try);
    R_RegisterCCallable("cmp", "cmp_rcmp", (DL_FUNC)cmp_rcmp_try);
    R_RegisterCCallable("cmp", "cmp_cmp_loglik", (DL_FUNC)cmp_cmp_loglik_try);
    R_RegisterCCallable("cmp", "cmp_cmp_loglik2", (DL_FUNC)cmp_cmp_loglik2_try);
    R_RegisterCCallable("cmp", "cmp_pois_loglik", (DL_FUNC)cmp_pois_loglik_try);
    R_RegisterCCallable("cmp", "cmp_nb_loglik", (DL_FUNC)cmp_nb_loglik_try);
    R_RegisterCCallable("cmp", "cmp_cmp_log_mean", (DL_FUNC)cmp_cmp_log_mean_try);
    R_RegisterCCallable("cmp", "cmp_cmp_log_mean_approx", (DL_FUNC)cmp_cmp_log_mean_approx_try);
    R_RegisterCCallable("cmp", "cmp_cmp_mean", (DL_FUNC)cmp_cmp_mean_try);
    R_RegisterCCallable("cmp", "cmp_cmp_log_var", (DL_FUNC)cmp_cmp_log_var_try);
    R_RegisterCCallable("cmp", "cmp_cmp_var", (DL_FUNC)cmp_cmp_var_try);
    R_RegisterCCallable("cmp", "cmp_cmp_log_var_approx", (DL_FUNC)cmp_cmp_log_var_approx_try);
    R_RegisterCCallable("cmp", "cmp_cmp_var_approx", (DL_FUNC)cmp_cmp_var_approx_try);
    R_RegisterCCallable("cmp", "cmp_RcppExport_validate", (DL_FUNC)cmp_RcppExport_validate);
    return R_NilValue;
}
