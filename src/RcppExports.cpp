// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/compoisson.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// com_compute_z
double com_compute_z(double lambda, double nu, double log_error_z = 1e-6, int maxit_z = 10000);
static SEXP compoisson_com_compute_z_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        double __result = com_compute_z(lambda, nu, log_error_z, maxit_z);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_com_compute_z(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_com_compute_z_try(lambdaSEXP, nuSEXP, log_error_zSEXP, maxit_zSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// com_compute_log_z
double com_compute_log_z(double lambda, double nu, double log_error_z = 1e-6, int maxit_z = 10000);
static SEXP compoisson_com_compute_log_z_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        double __result = com_compute_log_z(lambda, nu, log_error_z, maxit_z);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_com_compute_log_z(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_com_compute_log_z_try(lambdaSEXP, nuSEXP, log_error_zSEXP, maxit_zSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// com_compute_log_z_approx
double com_compute_log_z_approx(double lambda, double nu);
static SEXP compoisson_com_compute_log_z_approx_try(SEXP lambdaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        double __result = com_compute_log_z_approx(lambda, nu);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_com_compute_log_z_approx(SEXP lambdaSEXP, SEXP nuSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_com_compute_log_z_approx_try(lambdaSEXP, nuSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// logsumexp
double logsumexp(NumericVector x);
static SEXP compoisson_logsumexp_try(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        double __result = logsumexp(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_logsumexp(SEXP xSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_logsumexp_try(xSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// logdiffexp
double logdiffexp(double x, double y);
static SEXP compoisson_logdiffexp_try(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type y(ySEXP );
        double __result = logdiffexp(x, y);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_logdiffexp(SEXP xSEXP, SEXP ySEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_logdiffexp_try(xSEXP, ySEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// com_compute_log_z_old
double com_compute_log_z_old(double lambda, double nu, double log_error_z = 0.0001, int maxit_z = 10000);
static SEXP compoisson_com_compute_log_z_old_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        double __result = com_compute_log_z_old(lambda, nu, log_error_z, maxit_z);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_com_compute_log_z_old(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_com_compute_log_z_old_try(lambdaSEXP, nuSEXP, log_error_zSEXP, maxit_zSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// dcom
NumericVector dcom(NumericVector x, double lambda, double nu, double z = NA_REAL, bool log_p = false, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP compoisson_dcom_try(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_pSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        NumericVector __result = dcom(x, lambda, nu, z, log_p, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_dcom(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_pSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_dcom_try(xSEXP, lambdaSEXP, nuSEXP, zSEXP, log_pSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// pcom
NumericVector pcom(NumericVector q, double lambda, double nu, double z = NA_REAL, bool log_p = false, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP compoisson_pcom_try(SEXP qSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_pSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type q(qSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        NumericVector __result = pcom(q, lambda, nu, z, log_p, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_pcom(SEXP qSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_pSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_pcom_try(qSEXP, lambdaSEXP, nuSEXP, zSEXP, log_pSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// qcom
NumericVector qcom(NumericVector p, double lambda, double nu, double z = NA_REAL, bool log_p = false, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP compoisson_qcom_try(SEXP pSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_pSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        NumericVector __result = qcom(p, lambda, nu, z, log_p, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_qcom(SEXP pSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_pSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_qcom_try(pSEXP, lambdaSEXP, nuSEXP, zSEXP, log_pSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// rcom
NumericVector rcom(int n, double lambda, double nu, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP compoisson_rcom_try(SEXP nSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< int >::type n(nSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        NumericVector __result = rcom(n, lambda, nu, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_rcom(SEXP nSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_rcom_try(nSEXP, lambdaSEXP, nuSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// com_loglik
double com_loglik(NumericMatrix x, double lambda, double nu, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP compoisson_com_loglik_try(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        double __result = com_loglik(x, lambda, nu, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_com_loglik(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_com_loglik_try(xSEXP, lambdaSEXP, nuSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// com_loglik2
IntegerVector com_loglik2(NumericVector x, double lambda, double nu, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP compoisson_com_loglik2_try(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        IntegerVector __result = com_loglik2(x, lambda, nu, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_com_loglik2(SEXP xSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_com_loglik2_try(xSEXP, lambdaSEXP, nuSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// pois_loglik
double pois_loglik(NumericMatrix x, double lambda);
static SEXP compoisson_pois_loglik_try(SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        double __result = pois_loglik(x, lambda);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_pois_loglik(SEXP xSEXP, SEXP lambdaSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_pois_loglik_try(xSEXP, lambdaSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// nb_loglik
double nb_loglik(NumericMatrix x, double mu, double size);
static SEXP compoisson_nb_loglik_try(SEXP xSEXP, SEXP muSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP );
        Rcpp::traits::input_parameter< double >::type mu(muSEXP );
        Rcpp::traits::input_parameter< double >::type size(sizeSEXP );
        double __result = nb_loglik(x, mu, size);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_nb_loglik(SEXP xSEXP, SEXP muSEXP, SEXP sizeSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_nb_loglik_try(xSEXP, muSEXP, sizeSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// com_log_mean
double com_log_mean(double lambda, double nu, double log_error = 1e-6, int maxit = 1e6, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP compoisson_com_log_mean_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        double __result = com_log_mean(lambda, nu, log_error, maxit, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_com_log_mean(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_com_log_mean_try(lambdaSEXP, nuSEXP, log_errorSEXP, maxitSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// com_log_mean_approx
double com_log_mean_approx(double lambda, double nu);
static SEXP compoisson_com_log_mean_approx_try(SEXP lambdaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        double __result = com_log_mean_approx(lambda, nu);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_com_log_mean_approx(SEXP lambdaSEXP, SEXP nuSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_com_log_mean_approx_try(lambdaSEXP, nuSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// com_mean
double com_mean(double lambda, double nu, double log_error = 1e-6, int maxit = 1e6, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP compoisson_com_mean_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        double __result = com_mean(lambda, nu, log_error, maxit, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_com_mean(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_com_mean_try(lambdaSEXP, nuSEXP, log_errorSEXP, maxitSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// com_log_var
double com_log_var(double lambda, double nu, double log_error = 1e-6, int maxit = 1e6, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP compoisson_com_log_var_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        double __result = com_log_var(lambda, nu, log_error, maxit, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_com_log_var(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_com_log_var_try(lambdaSEXP, nuSEXP, log_errorSEXP, maxitSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// com_var
double com_var(double lambda, double nu, double log_error = 1e-6, int maxit = 1e6, double z = NA_REAL, double log_error_z = 1e-6, int maxit_z = 10000, bool parallel = false);
static SEXP compoisson_com_var_try(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        Rcpp::traits::input_parameter< double >::type log_error(log_errorSEXP );
        Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP );
        Rcpp::traits::input_parameter< double >::type z(zSEXP );
        Rcpp::traits::input_parameter< double >::type log_error_z(log_error_zSEXP );
        Rcpp::traits::input_parameter< int >::type maxit_z(maxit_zSEXP );
        Rcpp::traits::input_parameter< bool >::type parallel(parallelSEXP );
        double __result = com_var(lambda, nu, log_error, maxit, z, log_error_z, maxit_z, parallel);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_com_var(SEXP lambdaSEXP, SEXP nuSEXP, SEXP log_errorSEXP, SEXP maxitSEXP, SEXP zSEXP, SEXP log_error_zSEXP, SEXP maxit_zSEXP, SEXP parallelSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_com_var_try(lambdaSEXP, nuSEXP, log_errorSEXP, maxitSEXP, zSEXP, log_error_zSEXP, maxit_zSEXP, parallelSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// com_log_var_approx
double com_log_var_approx(double lambda, double nu);
static SEXP compoisson_com_log_var_approx_try(SEXP lambdaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        double __result = com_log_var_approx(lambda, nu);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_com_log_var_approx(SEXP lambdaSEXP, SEXP nuSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_com_log_var_approx_try(lambdaSEXP, nuSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// com_var_approx
double com_var_approx(double lambda, double nu);
static SEXP compoisson_com_var_approx_try(SEXP lambdaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP );
        Rcpp::traits::input_parameter< double >::type nu(nuSEXP );
        double __result = com_var_approx(lambda, nu);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP compoisson_com_var_approx(SEXP lambdaSEXP, SEXP nuSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(compoisson_com_var_approx_try(lambdaSEXP, nuSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int compoisson_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*com_compute_z)(double,double,double,int)");
        signatures.insert("double(*com_compute_log_z)(double,double,double,int)");
        signatures.insert("double(*com_compute_log_z_approx)(double,double)");
        signatures.insert("double(*logsumexp)(NumericVector)");
        signatures.insert("double(*logdiffexp)(double,double)");
        signatures.insert("double(*com_compute_log_z_old)(double,double,double,int)");
        signatures.insert("NumericVector(*dcom)(NumericVector,double,double,double,bool,double,int,bool)");
        signatures.insert("NumericVector(*pcom)(NumericVector,double,double,double,bool,double,int,bool)");
        signatures.insert("NumericVector(*qcom)(NumericVector,double,double,double,bool,double,int,bool)");
        signatures.insert("NumericVector(*rcom)(int,double,double,double,double,int,bool)");
        signatures.insert("double(*com_loglik)(NumericMatrix,double,double,double,double,int,bool)");
        signatures.insert("IntegerVector(*com_loglik2)(NumericVector,double,double,double,double,int,bool)");
        signatures.insert("double(*pois_loglik)(NumericMatrix,double)");
        signatures.insert("double(*nb_loglik)(NumericMatrix,double,double)");
        signatures.insert("double(*com_log_mean)(double,double,double,int,double,double,int,bool)");
        signatures.insert("double(*com_log_mean_approx)(double,double)");
        signatures.insert("double(*com_mean)(double,double,double,int,double,double,int,bool)");
        signatures.insert("double(*com_log_var)(double,double,double,int,double,double,int,bool)");
        signatures.insert("double(*com_var)(double,double,double,int,double,double,int,bool)");
        signatures.insert("double(*com_log_var_approx)(double,double)");
        signatures.insert("double(*com_var_approx)(double,double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP compoisson_RcppExport_registerCCallable() { 
    R_RegisterCCallable("compoisson", "compoisson_com_compute_z", (DL_FUNC)compoisson_com_compute_z_try);
    R_RegisterCCallable("compoisson", "compoisson_com_compute_log_z", (DL_FUNC)compoisson_com_compute_log_z_try);
    R_RegisterCCallable("compoisson", "compoisson_com_compute_log_z_approx", (DL_FUNC)compoisson_com_compute_log_z_approx_try);
    R_RegisterCCallable("compoisson", "compoisson_logsumexp", (DL_FUNC)compoisson_logsumexp_try);
    R_RegisterCCallable("compoisson", "compoisson_logdiffexp", (DL_FUNC)compoisson_logdiffexp_try);
    R_RegisterCCallable("compoisson", "compoisson_com_compute_log_z_old", (DL_FUNC)compoisson_com_compute_log_z_old_try);
    R_RegisterCCallable("compoisson", "compoisson_dcom", (DL_FUNC)compoisson_dcom_try);
    R_RegisterCCallable("compoisson", "compoisson_pcom", (DL_FUNC)compoisson_pcom_try);
    R_RegisterCCallable("compoisson", "compoisson_qcom", (DL_FUNC)compoisson_qcom_try);
    R_RegisterCCallable("compoisson", "compoisson_rcom", (DL_FUNC)compoisson_rcom_try);
    R_RegisterCCallable("compoisson", "compoisson_com_loglik", (DL_FUNC)compoisson_com_loglik_try);
    R_RegisterCCallable("compoisson", "compoisson_com_loglik2", (DL_FUNC)compoisson_com_loglik2_try);
    R_RegisterCCallable("compoisson", "compoisson_pois_loglik", (DL_FUNC)compoisson_pois_loglik_try);
    R_RegisterCCallable("compoisson", "compoisson_nb_loglik", (DL_FUNC)compoisson_nb_loglik_try);
    R_RegisterCCallable("compoisson", "compoisson_com_log_mean", (DL_FUNC)compoisson_com_log_mean_try);
    R_RegisterCCallable("compoisson", "compoisson_com_log_mean_approx", (DL_FUNC)compoisson_com_log_mean_approx_try);
    R_RegisterCCallable("compoisson", "compoisson_com_mean", (DL_FUNC)compoisson_com_mean_try);
    R_RegisterCCallable("compoisson", "compoisson_com_log_var", (DL_FUNC)compoisson_com_log_var_try);
    R_RegisterCCallable("compoisson", "compoisson_com_var", (DL_FUNC)compoisson_com_var_try);
    R_RegisterCCallable("compoisson", "compoisson_com_log_var_approx", (DL_FUNC)compoisson_com_log_var_approx_try);
    R_RegisterCCallable("compoisson", "compoisson_com_var_approx", (DL_FUNC)compoisson_com_var_approx_try);
    R_RegisterCCallable("compoisson", "compoisson_RcppExport_validate", (DL_FUNC)compoisson_RcppExport_validate);
    return R_NilValue;
}
